function intersectAction(elements,callback,observerOptions){"use strict";function typeOf(obj){return void 0!==window.jQuery&&obj instanceof jQuery?"jquery":toString.call(obj).slice(8,-1).toLowerCase()}const elementsType=typeOf(elements);null==observerOptions&&(observerOptions=defaultObserverOptions);const observer=new IntersectionObserver(doIntersect,observerOptions);if("jquery"===elementsType){const doms=elements.get();forEach.call(doms,(function(dom){observer.observe(dom)}))}else"nodelist"===elementsType||"htmlcollection"===elementsType?forEach.call(elements,(function(element){observer.observe(element)})):observer.observe(elements);function doIntersect(entries){"jquery"===elementsType?forEach.call(entries,(function(entry){callback(jQuery(entry.target),entry.isIntersecting,observer)})):forEach.call(entries,(function(entry){callback(entry.target,entry.isIntersecting,observer)}))}console.log(elementsType)}!function($){void 0!==window.jQuery&&($.fn.intersectAction=function(callback,observerOptions){const $this=this;void 0===observerOptions&&(observerOptions=defaultObserverOptions);const observer=new IntersectionObserver(doIntersect,observerOptions),doms=this.get();function doIntersect(entries){forEach.call(entries,(function(entry){return callback($(entry.target),entry.isIntersecting,observer),console.log($(entry.target)),$(entry.target)}))}forEach.call(doms,(function(dom){observer.observe(dom)}))},$.fn.test=function(callback){return callback("test"),this})}(jQuery);const defaultObserverOptions={root:null,rootMargin:"0px",threshold:0},forEach=Array.prototype.forEach,toString=Object.prototype.toString;